-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- 1. Create profiles table
CREATE TABLE profiles (
    id UUID PRIMARY KEY,
    username TEXT,
    email TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- 2. Create interests table
CREATE TABLE interests (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    title TEXT NOT NULL,
    description JSONB NOT NULL,
    image_path TEXT NOT NULL,
    route_path TEXT NOT NULL,
    name TEXT,
    user_id UUID REFERENCES profiles(id),
    sequence INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- 3. Create tags table
CREATE TABLE tags (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    interest_id UUID REFERENCES interests(id),
    user_id UUID REFERENCES profiles(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- 4. Create posts table
CREATE TABLE posts (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID REFERENCES profiles(id),
    title TEXT NOT NULL,
    content TEXT,
    excerpt TEXT,
    interests TEXT[],
    parent_id BIGINT REFERENCES posts(id),
    arc_id BIGINT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- 5. Create post_tags junction table
CREATE TABLE post_tags (
    post_id BIGINT REFERENCES posts(id) ON DELETE CASCADE,
    tag_id UUID REFERENCES tags(id) ON DELETE CASCADE,
    PRIMARY KEY (post_id, tag_id)
);

-- 6. Create post_developments table
CREATE TABLE post_developments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    post_id BIGINT NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    original TEXT,
    prompt TEXT,
    system_prompt TEXT,
    research_prompt TEXT,
    ideas JSONB,
    learnings JSONB,
    research_results JSONB,
    structure JSONB,
    first_draft TEXT,
    second_draft TEXT,
    images JSONB,
    refutations JSONB,
    final_draft TEXT,
    child_post_ids BIGINT[],
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    version INTEGER DEFAULT 1,
    status TEXT DEFAULT 'draft',
    metadata JSONB
);

-- 7. Create images table
CREATE TABLE images (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    url TEXT NOT NULL,
    post_id BIGINT REFERENCES posts(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add RLS policies
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE interests ENABLE ROW LEVEL SECURITY;
ALTER TABLE tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE post_tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE post_developments ENABLE ROW LEVEL SECURITY;
ALTER TABLE images ENABLE ROW LEVEL SECURITY;

-- Create policies for interests
CREATE POLICY "Interests are viewable by everyone"
    ON interests FOR SELECT USING (true);

CREATE POLICY "Interests are insertable by authenticated users only"
    ON interests FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Interests are updatable by authenticated users only"
    ON interests FOR UPDATE USING (auth.role() = 'authenticated');

-- Create policies for tags
CREATE POLICY "Tags are viewable by everyone"
    ON tags FOR SELECT USING (true);

CREATE POLICY "Tags are insertable by authenticated users only"
    ON tags FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Create policies for post_tags
CREATE POLICY "Post tags are viewable by everyone"
    ON post_tags FOR SELECT USING (true);

CREATE POLICY "Post tags are insertable by authenticated users only"
    ON post_tags FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Post tags are deletable by post owners"
    ON post_tags FOR DELETE USING (
        auth.uid() IN (
            SELECT user_id FROM posts WHERE id = post_id
        )
    );

-- Create policies for post_developments
CREATE POLICY "Users can view their own post developments"
    ON post_developments FOR SELECT USING (
        auth.uid() IN (
            SELECT user_id FROM posts WHERE posts.id = post_developments.post_id
        )
    );

CREATE POLICY "Users can insert their own post developments"
    ON post_developments FOR INSERT WITH CHECK (
        auth.uid() IN (
            SELECT user_id FROM posts WHERE posts.id = post_developments.post_id
        )
    );

CREATE POLICY "Users can update their own post developments"
    ON post_developments FOR UPDATE USING (
        auth.uid() IN (
            SELECT user_id FROM posts WHERE posts.id = post_developments.post_id
        )
    );

CREATE POLICY "Users can delete their own post developments"
    ON post_developments FOR DELETE USING (
        auth.uid() IN (
            SELECT user_id FROM posts WHERE posts.id = post_developments.post_id
        )
    );

-- Create policies for images
CREATE POLICY "Users can insert their own images"
    ON images FOR INSERT WITH CHECK (
        auth.uid() = (SELECT user_id FROM posts WHERE id = post_id)
    );

CREATE POLICY "Users can view their own images"
    ON images FOR SELECT USING (
        auth.uid() = (SELECT user_id FROM posts WHERE id = post_id)
    );

CREATE POLICY "Users can update their own images"
    ON images FOR UPDATE USING (
        auth.uid() = (SELECT user_id FROM posts WHERE id = post_id)
    );

CREATE POLICY "Users can delete their own images"
    ON images FOR DELETE USING (
        auth.uid() = (SELECT user_id FROM posts WHERE id = post_id)
    );

-- Create indexes
CREATE INDEX idx_post_developments_post_id ON post_developments(post_id);
CREATE INDEX idx_post_developments_status ON post_developments(status);

-- Create trigger for post_developments updated_at
CREATE OR REPLACE FUNCTION update_post_developments_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_post_developments_updated_at
    BEFORE UPDATE ON post_developments
    FOR EACH ROW
    EXECUTE FUNCTION update_post_developments_updated_at();

-- Create function to update post arc_ids
CREATE OR REPLACE FUNCTION update_post_arc(
    post_id INTEGER,
    parent_post_id INTEGER,
    arc_identifier INTEGER
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Update the child post's arc_id
    UPDATE posts
    SET arc_id = arc_identifier
    WHERE id = post_id;

    -- Update the parent's arc_id if it's not already set
    UPDATE posts
    SET arc_id = arc_identifier
    WHERE id = parent_post_id
    AND arc_id IS NULL;
END;
$$;

-- Create trigger function for new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
DECLARE
    temp_username TEXT;
    user_id UUID;
    user_email TEXT;
BEGIN
    -- Get the user data safely
    user_id := new.id;
    user_email := new.email::text;
    
    -- Create a temporary username from email (before the @ symbol)
    temp_username := split_part(user_email, '@', 1);
    
    -- Create a profile for the new user
    INSERT INTO public.profiles (id, email, username)
    VALUES (
        user_id,
        user_email,
        temp_username
    );

    -- Create a default interest for the new user
    INSERT INTO public.interests (name, title, description, user_id, sequence, image_path)
    VALUES (
        'general',
        'General',
        'General blog posts',
        user_id,
        1,
        '/images/interests/general.png'
    );

    RETURN new;
EXCEPTION
    WHEN others THEN
        RAISE LOG 'Error in handle_new_user: %', SQLERRM;
        RETURN null;
END;
$$;

-- Create trigger for new user creation
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE PROCEDURE public.handle_new_user(); 